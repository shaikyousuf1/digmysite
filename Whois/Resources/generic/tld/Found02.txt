---
#
# Generic TLD Parsing Template
#
name: generic/tld/Found02

# Use this template for catch-all parsing:
tag: catch-all

# Lines can appear out of order
outOfOrder: true

# End tokens on new lines
terminateOnNewLine: true

# Use token preamble on current line only
trimPreambleBeforeNewLine: true

# Set query response type:
set: Status = Found
---
   Domain Name: { DomainName : Trim, IsDomainName, ToHostName }
   Registry Domain ID: { RegistryDomainId ? : Trim }
   Registrar WHOIS Server: { Registrar.WhoisServer ? : IsNotEmpty, Trim, IsDomainName, ToHostName }
   Registrar URL: { Registrar.Url ? : Trim, IsLooseAbsoluteUrl, ToLower }
   Updated Date: { Updated ? : Trim, ToDateTimeUtc("yyyy-MM-ddTHH:mm:ssZ") }
   Updated Date: { Updated ? : Trim, ToDateTimeUtc("dd-MMM-yyyy") }
   Creation Date: { Registered ? : Trim, ToDateTimeUtc("yyyy-MM-ddTHH:mm:ssZ") }
   Creation Date: { Registered ? : Trim, ToDateTimeUtc("dd-MMM-yyyy") }
   Registry Expiry Date: { Expiration ? : Trim, ToDateTimeUtc("yyyy-MM-ddTHH:mm:ssZ") }
   Expiration Date: { Expiration ? : Trim, ToDateTimeUtc("dd-MMM-yyyy") }
   Registrar: { Registrar.Name ? : Trim }
   Registrar IANA ID: { Registrar.IanaId ? : Trim, IsNumeric }
   Registrar Abuse Contact Email: { Registrar.AbuseEmail ? : Trim, IsEmail }
   Registrar Abuse Contact Phone: { Registrar.AbuseTelephoneNumber ? : Trim, IsPhoneNumber }
   Domain Status: { DomainStatus ? : Trim, Repeating, CleanDomainStatus }
   Status: { DomainStatus ? : Trim, Repeating, CleanDomainStatus }
   Name Server: { NameServers : Trim, IsDomainName, ToLower, Repeating }
   DNSSEC: { DnsSecStatus ? : Trim }
