---
#
# .it Parsing Template
#
name: whois.nic.it/it/Found

# Use this template for queries to whois.nic.it:
tag: whois.nic.it
tag: it

# End tokens on new lines
terminateOnNewLine: true

# Set query response type:
set: Status = Found
---
Domain:             { DomainName : IsDomainName, ToHostName }
Status:             { DomainStatus ? : Repeating, SubstringBefore(' /'), CleanDomainStatus }
Created:            { Registered ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }
Last Update:        { Updated ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }
Expire Date:        { Expiration ? : ToDateTimeUtc("yyyy-MM-dd") }

Registrant
  Name:             { Registrant.Name }
  Organization:     { Registrant.Organization ? }
  ContactID:        { Registrant.RegistryId ? }
  Address:          { Registrant.Address ? : IsNotEmpty }
                    { Registrant.Address ? : IsNotEmpty, Repeating }
  Created:          { Registrant.Created ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }
  Last Update:      { Registrant.Updated ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }

Admin Contact
  Name:             { AdminContact.Name }
  Organization:     { AdminContact.Organization ? }
  ContactID:        { AdminContact.RegistryId ? }
  Address:          { AdminContact.Address ? : IsNotEmpty }
                    { AdminContact.Address ? : IsNotEmpty, Repeating }
  Created:          { AdminContact.Created ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }
  Last Update:      { AdminContact.Updated ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }

Technical Contacts
  Name:             { TechnicalContact.Name }
  Organization:     { TechnicalContact.Organization ? }
  ContactID:        { TechnicalContact.RegistryId  ? }
  Address:          { TechnicalContact.Address ? : IsNotEmpty }
                    { TechnicalContact.Address ? : IsNotEmpty, Repeating }
  Created:          { TechnicalContact.Created ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }
  Last Update:      { TechnicalContact.Updated ? : ToDateTimeUtc("yyyy-MM-dd HH:mm:ss") }

Registrar
  Name:             { Registrar.Name ? }
  Organization:     { Registrar.Name ? }

Nameservers
  { NameServers ? : IsDomainName, ToLower, Repeating }

